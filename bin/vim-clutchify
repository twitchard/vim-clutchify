#!/usr/bin/env python

import argparse
import sys, getopt
from evdev import UInput, InputDevice, InputEvent, list_devices, ecodes
import re
from time import sleep
from colored import fg, bg, attr, stylize

def main():
    parser = argparse.ArgumentParser(description='Use a "clutch" with VIM / NeoVim.')
    parser.add_argument('--name', '-n', metavar='HID XX:XX', help='the device name')
    parser.add_argument('--path', '-p', metavar='/dev/input/eventX', help='the device path')
    parser.add_argument('--sleep-time', '-s', metavar='0.1', help='sleep time between pressing "ESC" and "a"', default='0.1')

    args = parser.parse_args()
    device_name = args.name
    device_path = args.path
    sleep_time = float(args.sleep_time)

    if  device_path:
        device = InputDevice(device_path)
    else:
        devices = [InputDevice(device) for device in list_devices()]
        if device_name:
            device = [d for d in devices if d.name == device_name][0]
        else:
            print(stylize('=== Device list ===', fg('grey_50')))
            for print_device in devices:
                print(stylize('[%d]' % (devices.index(print_device)), fg('yellow')), print_device.name)
            index = int(input('Which device do you want to reprogram ? '))

            # device = InputDevice('/dev/input/event3') # clutch
            device = devices[index]

    print('reprogramming device with path %s' % device.path)

    with UInput() as ui:
        for event in device.read_loop():
            if event.type == ecodes.EV_KEY:
                if event.value == 1:
                    ui.write(ecodes.EV_KEY, ecodes.KEY_ESC, 1)
                    ui.write(ecodes.EV_KEY, ecodes.KEY_ESC, 0)
                    ui.syn()
                    sleep(sleep_time)
                    ui.write(ecodes.EV_KEY, ecodes.KEY_A, 1)
                    ui.write(ecodes.EV_KEY, ecodes.KEY_A, 0)
                    ui.syn()
                elif event.value == 0:
                    ui.write(ecodes.EV_KEY, ecodes.KEY_ESC, 1)
                    ui.write(ecodes.EV_KEY, ecodes.KEY_ESC, 0)
                    ui.syn()

if __name__ == "__main__":
    main()
